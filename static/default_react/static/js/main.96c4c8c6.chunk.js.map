{"version":3,"sources":["library/reportWebVitals.ts","library/serviceWorkerRegistration.ts","assets/logo.svg","components/template.tsx","pages/Main.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Template","src","logo","className","alt","href","target","rel","Main","document","getElementById","hasChildNodes","hydrate","render","_targetFunc","targetFunc","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"6IAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGRQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTb,MAAK,SAACkB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,cCnGlD,MAA0B,iC,OCmB1BC,EAjBE,WACf,OAAO,qCACL,qBAAKC,IAAKC,EAAMC,UAAU,WAAWC,IAAI,SACzC,sCACO,oDADP,0BAGA,mBACED,UAAU,WACVE,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,6BCGWC,EARF,WACX,OAAO,qBAAKL,UAAU,MAAf,SACL,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,UC6Bc,WAAO,IAAD,EACxB,iBAAIM,SAASC,eAAe,eAA5B,OAAI,EAAiCC,gBAC5BC,UACFC,UAEUC,EAInBC,CACE,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFP,SAASC,eAAe,SJvBnB,SAAkB3B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiC,IAAIC,wBAAwBzC,OAAOC,SAAS2B,MACpDc,SAAW1C,OAAOC,SAASyC,OAIvC,OAGF1C,OAAO2C,iBAAiB,QAAQ,WAC9B,IAAMtC,EAAK,UAAMoC,wBAAN,sBAEP3C,IAgEV,SAAiCO,EAAeC,GAE9CsC,MAAMvC,EAAO,CACXwC,QAAS,CAAE,iBAAkB,YAE5BrD,MAAK,SAACsD,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3C,UAAUC,cAAc2C,MAAM3D,MAAK,SAACkB,GAClCA,EAAa0C,aAAa5D,MAAK,WAC7BQ,OAAOC,SAASoD,eAKpBjD,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IAAI,oEAtFVoC,CAAwBjD,EAAOC,GAI/BC,UAAUC,cAAc2C,MAAM3D,MAAK,WACjCyB,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,OID/BiD,GAGAlE,K","file":"static/js/main.96c4c8c6.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import logo from '../assets/logo.svg';\n\nconst Template = () => {\n  return <>\n    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    <p>\n      Edit <code>src/apps/App.tsx</code> and save to reload.\n    </p>\n    <a\n      className=\"App-link\"\n      href=\"https://reactjs.org\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      Learn React\n    </a>\n  </>\n}\n\nexport default Template;\n","import './main.css';\nimport Template from '../components/template';\n\nconst Main = () => {\n  return <div className=\"App\">\n    <header className=\"App-header\">\n      <Template />\n    </header>\n  </div>\n}\n\nexport default Main;\n","\n/*\n\n  Welcome to your new React PWA project\n\n  By default data-analysis on web traffic and system performance\n  will be anonymously recorded for you and available to you via\n  your django server admin app.\n\n  --- IMPORTS\n    any use of `import` on this file will be permanently loaded into\n    the virtual-DOM upon every use-case of this web application.\n\n  --- TARGET FUNC\n    the objective of `_targetFunc` is to determine whether or not the\n    appropriate rendering method is `hydrate` or `render` for the sake\n    of server side rendering.\n\n*/\n\n// Node Modules\nimport React from 'react';\nimport { hydrate, render } from \"react-dom\";\n\n// Web Analysis\nimport reportWebVitals from './library/reportWebVitals';\nimport * as serviceWorkerRegistration from './library/serviceWorkerRegistration';\n\n// Application Styling\nimport './index.css';\n\n// Application Components\nimport Main from './pages/Main';\n\n// Server Side Rendering\nconst _targetFunc = () => {\n  if (document.getElementById(\"root\")?.hasChildNodes())\n    return hydrate\n  return render\n}\nconst targetFunc = _targetFunc()\n\n// Default Render of Application\n// TODO: integrate React-Router into this\ntargetFunc(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// SERVICE WORKER         to toggle: change __init__.py\nserviceWorkerRegistration.register();\n\n// WEB VITALS             to toggle: change __init__.py\nreportWebVitals();\n"],"sourceRoot":""}